/*
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License") 1.1!
 * You may not use this file except in compliance with the License.
 *
 * See  https://spdx.org/licenses/CDDL-1.1.html  for the specific
 * language governing permissions and limitations under the License.
 *
 * Copyright 2025 Jens Elkner (jel+solmex-src@cs.ovgu.de)
 */

/*
NOTE: Keep {icmp,ip,rawip,stcp,tcp,udp}_idx_t and
      {sname,sdesc,kname}_{icmp,ip,rawip,stcp,tcp,udp} always in sync!
*/

#ifndef SOLMEX_MIB_IMPL_H
#define SOLMEX_MIB_IMPL_H

#include "common.h"

#ifdef __cplusplus
extern "C" {
#endif

#define STRINGIFY(x) #x
#define _S(x) STRINGIFY(x)

/* index into snames/knames/sdesc */
typedef enum rawip_idx {
	RAWIP_IDX_INCKSUMERRS,	RAWIP_IDX_INDATAGRAMS,	RAWIP_IDX_INERRORS,
	RAWIP_IDX_OUTDATAGRAMS,	RAWIP_IDX_OUTERRORS,	RAWIP_IDX_MAX
} rawip_idx_t;

/* kstat names */
static const char *knames_rawip[] = {
	"inCksumErrs",	"inDatagrams",	"inErrors",
	"outDatagrams",	"outErrors",	NULL
};

/* solmex metric names */
static const char *snames_rawip[] = {
	_S(SOLMEX_RAWIP_INCKSUMERRS_N),	_S(SOLMEX_RAWIP_INDATAGRAMS_N),	_S(SOLMEX_RAWIP_INERRORS_N),
	_S(SOLMEX_RAWIP_OUTDATAGRAMS_N),_S(SOLMEX_RAWIP_OUTERRORS_N),	NULL
};

/* metric HELP text */
static const char *sdesc_rawip[] = {
	SOLMEX_RAWIP_INCKSUMERRS_D,	SOLMEX_RAWIP_INDATAGRAMS_D,	SOLMEX_RAWIP_INERRORS_D,
	SOLMEX_RAWIP_OUTDATAGRAMS_D,SOLMEX_RAWIP_OUTERRORS_D,	NULL
};

static rawip_idx_t rawipstats_a[] = {
	RAWIP_IDX_INCKSUMERRS,	RAWIP_IDX_INDATAGRAMS,	RAWIP_IDX_INERRORS,
	RAWIP_IDX_OUTDATAGRAMS,	RAWIP_IDX_OUTERRORS // 5
};
static const uint32_t rawipstats_a_sz = ARRAY_SIZE(rawipstats_a);

static rawip_idx_t rawipstats_x[] = {
	RAWIP_IDX_INDATAGRAMS,	RAWIP_IDX_INERRORS,
	RAWIP_IDX_OUTDATAGRAMS,	RAWIP_IDX_OUTERRORS	// 5 - 1
};
static const uint32_t rawipstats_x_sz = ARRAY_SIZE(rawipstats_x);

static rawip_idx_t rawipstats_r[] = {
	RAWIP_IDX_OUTDATAGRAMS,	RAWIP_IDX_OUTERRORS	// 5 - 1 - 2
};
static const uint32_t rawipstats_r_sz = ARRAY_SIZE(rawipstats_r);


/* index into snames/knames/sdesc */
typedef enum ip_idx {
	IP_IDX_ADDRENTRYSIZE,		IP_IDX_DEFAULTTTL,		IP_IDX_FORWDATAGRAMS,
	IP_IDX_FORWPROHIBITS,		IP_IDX_FORWARDING,		IP_IDX_FRAGCREATES,
	IP_IDX_FRAGFAILS,			IP_IDX_FRAGOKS,			IP_IDX_INADDRERRORS,
	IP_IDX_INCKSUMERRS,			IP_IDX_INDELIVERS,		IP_IDX_INDISCARDS,
	IP_IDX_INERRS,				IP_IDX_INHDRERRORS,		IP_IDX_INIPV6,
	IP_IDX_INRECEIVES,			IP_IDX_INUNKNOWNPROTOS,	IP_IDX_IPSECINFAILED,
	IP_IDX_IPSECINSUCCEEDED,	IP_IDX_MEMBERENTRYSIZE,	IP_IDX_NETTOMEDIAENTRYSIZE,
	IP_IDX_NOPORTS,				IP_IDX_OUTDISCARDS,		IP_IDX_OUTIPV6,
	IP_IDX_OUTNOROUTES,			IP_IDX_OUTREQUESTS,		IP_IDX_OUTSWITCHIPV6,
	IP_IDX_RAWIPINOVERFLOWS,	IP_IDX_REASMDUPLICATES,	IP_IDX_REASMFAILS,
	IP_IDX_REASMOKS,			IP_IDX_REASMPARTDUPS,	IP_IDX_REASMREQDS,
	IP_IDX_REASMTIMEOUT,		IP_IDX_ROUTEENTRYSIZE,	IP_IDX_ROUTINGDISCARDS,
	IP_IDX_UDPINCKSUMERRS,		IP_IDX_UDPINOVERFLOWS,	IP_IDX_MAX
} ip_idx_t;

/* kstat names */
static const char *knames_ip[] = {
	"addrEntrySize",	"defaultTTL",		"forwDatagrams",
	"forwProhibits",	"forwarding",		"fragCreates",
	"fragFails",		"fragOKs",			"inAddrErrors",
	"inCksumErrs",		"inDelivers",		"inDiscards",
	"inErrs",			"inHdrErrors",		"inIPv6",
	"inReceives",		"inUnknownProtos",	"ipsecInFailed",
	"ipsecInSucceeded",	"memberEntrySize",	"netToMediaEntrySize",
	"noPorts",			"outDiscards",		"outIPv6",
	"outNoRoutes",		"outRequests",		"outSwitchIPv6",
	"rawipInOverflows",	"reasmDuplicates",	"reasmFails",
	"reasmOKs",			"reasmPartDups",	"reasmReqds",
	"reasmTimeout",		"routeEntrySize",	"routingDiscards",
	"udpInCksumErrs",	"udpInOverflows",	NULL
};

/* solmex metric names */
static const char *snames_ip[] = {
	_S(SOLMEX_IP_ADDRENTRYSIZE_N),		_S(SOLMEX_IP_DEFAULTTTL_N),			_S(SOLMEX_IP_FORWDATAGRAMS_N),
	_S(SOLMEX_IP_FORWPROHIBITS_N),		_S(SOLMEX_IP_FORWARDING_N),			_S(SOLMEX_IP_FRAGCREATES_N),
	_S(SOLMEX_IP_FRAGFAILS_N),			_S(SOLMEX_IP_FRAGOKS_N),			_S(SOLMEX_IP_INADDRERRORS_N),
	_S(SOLMEX_IP_INCKSUMERRS_N),		_S(SOLMEX_IP_INDELIVERS_N),			_S(SOLMEX_IP_INDISCARDS_N),
	_S(SOLMEX_IP_INERRS_N),				_S(SOLMEX_IP_INHDRERRORS_N),		_S(SOLMEX_IP_INIPV6_N),
	_S(SOLMEX_IP_INRECEIVES_N),			_S(SOLMEX_IP_INUNKNOWNPROTOS_N),	_S(SOLMEX_IP_IPSECINFAILED_N),
	_S(SOLMEX_IP_IPSECINSUCCEEDED_N),	_S(SOLMEX_IP_MEMBERENTRYSIZE_N),	_S(SOLMEX_IP_NETTOMEDIAENTRYSIZE_N),
	_S(SOLMEX_IP_NOPORTS_N),			_S(SOLMEX_IP_OUTDISCARDS_N),		_S(SOLMEX_IP_OUTIPV6_N),
	_S(SOLMEX_IP_OUTNOROUTES_N),		_S(SOLMEX_IP_OUTREQUESTS_N),		_S(SOLMEX_IP_OUTSWITCHIPV6_N),
	_S(SOLMEX_IP_RAWIPINOVERFLOWS_N),	_S(SOLMEX_IP_REASMDUPLICATES_N),	_S(SOLMEX_IP_REASMFAILS_N),
	_S(SOLMEX_IP_REASMOKS_N),			_S(SOLMEX_IP_REASMPARTDUPS_N),		_S(SOLMEX_IP_REASMREQDS_N),
	_S(SOLMEX_IP_REASMTIMEOUT_N),		_S(SOLMEX_IP_ROUTEENTRYSIZE_N),		_S(SOLMEX_IP_ROUTINGDISCARDS_N),
	_S(SOLMEX_IP_UDPINCKSUMERRS_N),		_S(SOLMEX_IP_UDPINOVERFLOWS_N),		NULL
};

/* metric HELP text */
static const char *sdesc_ip[] = {
	SOLMEX_IP_ADDRENTRYSIZE_D,		SOLMEX_IP_DEFAULTTTL_D,		SOLMEX_IP_FORWDATAGRAMS_D,
	SOLMEX_IP_FORWPROHIBITS_D,		SOLMEX_IP_FORWARDING_D,		SOLMEX_IP_FRAGCREATES_D,
	SOLMEX_IP_FRAGFAILS_D,			SOLMEX_IP_FRAGOKS_D,		SOLMEX_IP_INADDRERRORS_D,
	SOLMEX_IP_INCKSUMERRS_D,		SOLMEX_IP_INDELIVERS_D,		SOLMEX_IP_INDISCARDS_D,
	SOLMEX_IP_INERRS_D,				SOLMEX_IP_INHDRERRORS_D,	SOLMEX_IP_INIPV6_D,
	SOLMEX_IP_INRECEIVES_D,			SOLMEX_IP_INUNKNOWNPROTOS_D,SOLMEX_IP_IPSECINFAILED_D,
	SOLMEX_IP_IPSECINSUCCEEDED_D,	SOLMEX_IP_MEMBERENTRYSIZE_D,SOLMEX_IP_NETTOMEDIAENTRYSIZE_D,
	SOLMEX_IP_NOPORTS_D,			SOLMEX_IP_OUTDISCARDS_D,	SOLMEX_IP_OUTIPV6_D,
	SOLMEX_IP_OUTNOROUTES_D,		SOLMEX_IP_OUTREQUESTS_D,	SOLMEX_IP_OUTSWITCHIPV6_D,
	SOLMEX_IP_RAWIPINOVERFLOWS_D,	SOLMEX_IP_REASMDUPLICATES_D,SOLMEX_IP_REASMFAILS_D,
	SOLMEX_IP_REASMOKS_D,			SOLMEX_IP_REASMPARTDUPS_D,	SOLMEX_IP_REASMREQDS_D,
	SOLMEX_IP_REASMTIMEOUT_D,		SOLMEX_IP_ROUTEENTRYSIZE_D,	SOLMEX_IP_ROUTINGDISCARDS_D,
	SOLMEX_IP_UDPINCKSUMERRS_D,		SOLMEX_IP_UDPINOVERFLOWS_D,	NULL
};

static ip_idx_t ipstats_a[] = {
	IP_IDX_ADDRENTRYSIZE,	IP_IDX_DEFAULTTTL,		IP_IDX_FORWDATAGRAMS,
	IP_IDX_FORWPROHIBITS,	IP_IDX_FORWARDING,		IP_IDX_FRAGCREATES,
	IP_IDX_FRAGFAILS,		IP_IDX_FRAGOKS,			IP_IDX_INADDRERRORS,
	IP_IDX_INCKSUMERRS,		IP_IDX_INDELIVERS,		IP_IDX_INDISCARDS,
	IP_IDX_INERRS,			IP_IDX_INHDRERRORS,		IP_IDX_INIPV6,
	IP_IDX_INRECEIVES,		IP_IDX_INUNKNOWNPROTOS,	IP_IDX_IPSECINFAILED,
	IP_IDX_IPSECINSUCCEEDED,IP_IDX_MEMBERENTRYSIZE,	IP_IDX_NETTOMEDIAENTRYSIZE,
	IP_IDX_NOPORTS,			IP_IDX_OUTDISCARDS,		IP_IDX_OUTIPV6,
	IP_IDX_OUTNOROUTES,		IP_IDX_OUTREQUESTS,		IP_IDX_OUTSWITCHIPV6,
	IP_IDX_RAWIPINOVERFLOWS,IP_IDX_REASMDUPLICATES,	IP_IDX_REASMFAILS,
	IP_IDX_REASMOKS,		IP_IDX_REASMPARTDUPS,	IP_IDX_REASMREQDS,
	IP_IDX_REASMTIMEOUT,	IP_IDX_ROUTEENTRYSIZE,	IP_IDX_ROUTINGDISCARDS,
	IP_IDX_UDPINCKSUMERRS,	IP_IDX_UDPINOVERFLOWS	// 38
};
static const uint32_t ipstats_a_sz = ARRAY_SIZE(ipstats_a);

static ip_idx_t ipstats_x[] = {
													IP_IDX_FORWDATAGRAMS,
	IP_IDX_FORWPROHIBITS,							IP_IDX_FRAGCREATES,
							IP_IDX_FRAGOKS,			IP_IDX_INADDRERRORS,
	IP_IDX_INCKSUMERRS,		IP_IDX_INDELIVERS,		IP_IDX_INDISCARDS,
	IP_IDX_INERRS,			IP_IDX_INHDRERRORS,		IP_IDX_INIPV6,
	IP_IDX_INRECEIVES,		IP_IDX_INUNKNOWNPROTOS,	IP_IDX_IPSECINFAILED,
	IP_IDX_IPSECINSUCCEEDED,
	IP_IDX_NOPORTS,			IP_IDX_OUTDISCARDS,
							IP_IDX_OUTREQUESTS,
	IP_IDX_RAWIPINOVERFLOWS,						IP_IDX_REASMFAILS,
	IP_IDX_REASMOKS,								IP_IDX_REASMREQDS,
	//
	IP_IDX_UDPINCKSUMERRS,	IP_IDX_UDPINOVERFLOWS	// 38 - 14
};
static const uint32_t ipstats_x_sz = ARRAY_SIZE(ipstats_x);

static ip_idx_t ipstats_r[] = {
	//
	//
	//
							IP_IDX_INDELIVERS,		IP_IDX_INDISCARDS,
	IP_IDX_INERRS,
	IP_IDX_INRECEIVES,
	//
	IP_IDX_NOPORTS,			IP_IDX_OUTDISCARDS,
							IP_IDX_OUTREQUESTS,
	//
	//
	//
	// 38 - 14 - 17
};
static const uint32_t ipstats_r_sz = ARRAY_SIZE(ipstats_r);


/* index into snames/knames/sdesc */
typedef enum icmp_idx {
	ICMP_IDX_INADDRMASKREPS,	ICMP_IDX_INADDRMASKS,		ICMP_IDX_INBADREDIRECTS,
	ICMP_IDX_INCHKSUMERRS,		ICMP_IDX_INDESTUNREACHS,	ICMP_IDX_INECHOREPS,
	ICMP_IDX_INECHOS,			ICMP_IDX_INERRORS,			ICMP_IDX_INFRAGNEEDED,
	ICMP_IDX_INMSGS,			ICMP_IDX_INOVERFLOWS,		ICMP_IDX_INPARMPROBS,
	ICMP_IDX_INREDIRECTS,		ICMP_IDX_INSRCQUENCHS,		ICMP_IDX_INTIMEEXCDS,
	ICMP_IDX_INTIMESTAMPREPS,	ICMP_IDX_INTIMESTAMPS,		ICMP_IDX_INUNKNOWNS,
	ICMP_IDX_OUTADDRMASKREPS,	ICMP_IDX_OUTADDRMASKS,		ICMP_IDX_OUTDESTUNREACHS,
	ICMP_IDX_OUTDROPS,			ICMP_IDX_OUTECHOREPS,		ICMP_IDX_OUTECHOS,
	ICMP_IDX_OUTERRORS,			ICMP_IDX_OUTFRAGNEEDED,		ICMP_IDX_OUTMSGS,
	ICMP_IDX_OUTPARMPROBS,		ICMP_IDX_OUTREDIRECTS,		ICMP_IDX_OUTSRCQUENCHS,
	ICMP_IDX_OUTTIMEEXCDS,		ICMP_IDX_OUTTIMESTAMPREPS,	ICMP_IDX_OUTTIMESTAMPS,
	ICMP_IDX_MAX
} icmp_idx_t;

/* kstat names */
static const char *knames_icmp[] = {
	"inAddrMaskReps",	"inAddrMasks",		"inBadRedirects",
	"inChksumErrs",		"inDestUnreachs",	"inEchoReps",
	"inEchos",			"inErrors",			"inFragNeeded",
	"inMsgs",			"inOverFlows",		"inParmProbs",
	"inRedirects",		"inSrcQuenchs",		"inTimeExcds",
	"inTimestampReps",	"inTimestamps",		"inUnknowns",
	"outAddrMaskReps",	"outAddrMasks",		"outDestUnreachs",
	"outDrops",			"outEchoReps",		"outEchos",
	"outErrors",		"outFragNeeded",	"outMsgs",
	"outParmProbs",		"outRedirects",		"outSrcQuenchs",
	"outTimeExcds",		"outTimestampReps",	"outTimestamps",
	NULL
};

/* solmex metric names */
static const char *snames_icmp[] = {
	_S(SOLMEX_ICMP_INADDRMASKREPS_N),	_S(SOLMEX_ICMP_INADDRMASKS_N),		_S(SOLMEX_ICMP_INBADREDIRECTS_N),
	_S(SOLMEX_ICMP_INCHKSUMERRS_N),		_S(SOLMEX_ICMP_INDESTUNREACHS_N),	_S(SOLMEX_ICMP_INECHOREPS_N),
	_S(SOLMEX_ICMP_INECHOS_N),			_S(SOLMEX_ICMP_INERRORS_N),			_S(SOLMEX_ICMP_INFRAGNEEDED_N),
	_S(SOLMEX_ICMP_INMSGS_N),			_S(SOLMEX_ICMP_INOVERFLOWS_N),		_S(SOLMEX_ICMP_INPARMPROBS_N),
	_S(SOLMEX_ICMP_INREDIRECTS_N),		_S(SOLMEX_ICMP_INSRCQUENCHS_N),		_S(SOLMEX_ICMP_INTIMEEXCDS_N),
	_S(SOLMEX_ICMP_INTIMESTAMPREPS_N),	_S(SOLMEX_ICMP_INTIMESTAMPS_N),		_S(SOLMEX_ICMP_INUNKNOWNS_N),
	_S(SOLMEX_ICMP_OUTADDRMASKREPS_N),	_S(SOLMEX_ICMP_OUTADDRMASKS_N),		_S(SOLMEX_ICMP_OUTDESTUNREACHS_N),
	_S(SOLMEX_ICMP_OUTDROPS_N),			_S(SOLMEX_ICMP_OUTECHOREPS_N),		_S(SOLMEX_ICMP_OUTECHOS_N),
	_S(SOLMEX_ICMP_OUTERRORS_N),		_S(SOLMEX_ICMP_OUTFRAGNEEDED_N),	_S(SOLMEX_ICMP_OUTMSGS_N),
	_S(SOLMEX_ICMP_OUTPARMPROBS_N),		_S(SOLMEX_ICMP_OUTREDIRECTS_N),		_S(SOLMEX_ICMP_OUTSRCQUENCHS_N),
	_S(SOLMEX_ICMP_OUTTIMEEXCDS_N),		_S(SOLMEX_ICMP_OUTTIMESTAMPREPS_N),	_S(SOLMEX_ICMP_OUTTIMESTAMPS_N),
	NULL
};

/* metric HELP text */
static const char *sdesc_icmp[] = {
	SOLMEX_ICMP_INADDRMASKREPS_D,	SOLMEX_ICMP_INADDRMASKS_D,		SOLMEX_ICMP_INBADREDIRECTS_D,
	SOLMEX_ICMP_INCHKSUMERRS_D,		SOLMEX_ICMP_INDESTUNREACHS_D,	SOLMEX_ICMP_INECHOREPS_D,
	SOLMEX_ICMP_INECHOS_D,			SOLMEX_ICMP_INERRORS_D,			SOLMEX_ICMP_INFRAGNEEDED_D,
	SOLMEX_ICMP_INMSGS_D,			SOLMEX_ICMP_INOVERFLOWS_D,		SOLMEX_ICMP_INPARMPROBS_D,
	SOLMEX_ICMP_INREDIRECTS_D,		SOLMEX_ICMP_INSRCQUENCHS_D,		SOLMEX_ICMP_INTIMEEXCDS_D,
	SOLMEX_ICMP_INTIMESTAMPREPS_D,	SOLMEX_ICMP_INTIMESTAMPS_D,		SOLMEX_ICMP_INUNKNOWNS_D,
	SOLMEX_ICMP_OUTADDRMASKREPS_D,	SOLMEX_ICMP_OUTADDRMASKS_D,		SOLMEX_ICMP_OUTDESTUNREACHS_D,
	SOLMEX_ICMP_OUTDROPS_D,			SOLMEX_ICMP_OUTECHOREPS_D,		SOLMEX_ICMP_OUTECHOS_D,
	SOLMEX_ICMP_OUTERRORS_D,		SOLMEX_ICMP_OUTFRAGNEEDED_D,	SOLMEX_ICMP_OUTMSGS_D,
	SOLMEX_ICMP_OUTPARMPROBS_D,		SOLMEX_ICMP_OUTREDIRECTS_D,		SOLMEX_ICMP_OUTSRCQUENCHS_D,
	SOLMEX_ICMP_OUTTIMEEXCDS_D,		SOLMEX_ICMP_OUTTIMESTAMPREPS_D,	SOLMEX_ICMP_OUTTIMESTAMPS_D,
	NULL
};
// ICMP stats all
static icmp_idx_t icmpstats_a[] = {
	ICMP_IDX_INADDRMASKREPS,	ICMP_IDX_INADDRMASKS,		ICMP_IDX_INBADREDIRECTS,
	ICMP_IDX_INCHKSUMERRS,		ICMP_IDX_INDESTUNREACHS,	ICMP_IDX_INECHOREPS,
	ICMP_IDX_INECHOS,			ICMP_IDX_INERRORS,			ICMP_IDX_INFRAGNEEDED,
	ICMP_IDX_INMSGS,			ICMP_IDX_INOVERFLOWS,		ICMP_IDX_INPARMPROBS,
	ICMP_IDX_INREDIRECTS,		ICMP_IDX_INSRCQUENCHS,		ICMP_IDX_INTIMEEXCDS,
	ICMP_IDX_INTIMESTAMPREPS,	ICMP_IDX_INTIMESTAMPS,		ICMP_IDX_INUNKNOWNS,
	ICMP_IDX_OUTADDRMASKREPS,	ICMP_IDX_OUTADDRMASKS,		ICMP_IDX_OUTDESTUNREACHS,
	ICMP_IDX_OUTDROPS,			ICMP_IDX_OUTECHOREPS,		ICMP_IDX_OUTECHOS,
	ICMP_IDX_OUTERRORS,			ICMP_IDX_OUTFRAGNEEDED,		ICMP_IDX_OUTMSGS,
	ICMP_IDX_OUTPARMPROBS,		ICMP_IDX_OUTREDIRECTS,		ICMP_IDX_OUTSRCQUENCHS,
	ICMP_IDX_OUTTIMEEXCDS,		ICMP_IDX_OUTTIMESTAMPREPS,	ICMP_IDX_OUTTIMESTAMPS // 33
};
static const uint32_t icmpstats_a_sz = ARRAY_SIZE(icmpstats_a);

// ICMP stats extended
static icmp_idx_t icmpstats_x[] = {
															ICMP_IDX_INBADREDIRECTS,
	ICMP_IDX_INCHKSUMERRS,		ICMP_IDX_INDESTUNREACHS,	ICMP_IDX_INECHOREPS,
	ICMP_IDX_INECHOS,			ICMP_IDX_INERRORS,			ICMP_IDX_INFRAGNEEDED,
	ICMP_IDX_INMSGS,										ICMP_IDX_INPARMPROBS,
	ICMP_IDX_INREDIRECTS,									ICMP_IDX_INTIMEEXCDS,
															ICMP_IDX_INUNKNOWNS,
															ICMP_IDX_OUTDESTUNREACHS,
	ICMP_IDX_OUTDROPS,			ICMP_IDX_OUTECHOREPS,		ICMP_IDX_OUTECHOS,
	ICMP_IDX_OUTERRORS,			ICMP_IDX_OUTFRAGNEEDED,		ICMP_IDX_OUTMSGS,
	ICMP_IDX_OUTPARMPROBS,		ICMP_IDX_OUTREDIRECTS,
	ICMP_IDX_OUTTIMEEXCDS	// 33 - 11
};
static const uint32_t icmpstats_x_sz = ARRAY_SIZE(icmpstats_x);

// ICMP stats normal
static icmp_idx_t icmpstats_r[] = {
	ICMP_IDX_INCHKSUMERRS,		ICMP_IDX_INDESTUNREACHS,	ICMP_IDX_INECHOREPS,
	ICMP_IDX_INECHOS,			ICMP_IDX_INERRORS,
	ICMP_IDX_INMSGS,										ICMP_IDX_INPARMPROBS,
															ICMP_IDX_INTIMEEXCDS,
															ICMP_IDX_OUTDESTUNREACHS,
								ICMP_IDX_OUTECHOREPS,		ICMP_IDX_OUTECHOS,
															ICMP_IDX_OUTMSGS,
	ICMP_IDX_OUTPARMPROBS,
	ICMP_IDX_OUTTIMEEXCDS	// 33 - 11 - 8
};
static const uint32_t icmpstats_r_sz = ARRAY_SIZE(icmpstats_r);


/* index into snames/knames/sdesc */
typedef enum sctp_idx {
	SCTP_IDX_SCTPABORTED,			SCTP_IDX_SCTPACTIVEESTAB,		SCTP_IDX_SCTPCHECKSUMERROR,
	SCTP_IDX_SCTPCURRESTAB,			SCTP_IDX_SCTPFRAGUSRMSGS,		SCTP_IDX_SCTPINACK,
	SCTP_IDX_SCTPINACKUNSENT,		SCTP_IDX_SCTPINCLOSED,			SCTP_IDX_SCTPINCTRLCHUNKS,
	SCTP_IDX_SCTPINDUPACK,			SCTP_IDX_SCTPININVALIDCOOKIE,	SCTP_IDX_SCTPINORDERCHUNKS,
	SCTP_IDX_SCTPINSCTPPKTS,		SCTP_IDX_SCTPINUNORDERCHUNKS,	SCTP_IDX_SCTPLISTENDROP,
	SCTP_IDX_SCTPMAXASSOCS,			SCTP_IDX_SCTPMAXINITRETR,		SCTP_IDX_SCTPOUTACK,
	SCTP_IDX_SCTPOUTACKDELAYED,		SCTP_IDX_SCTPOUTCTRLCHUNKS,		SCTP_IDX_SCTPOUTFASTRETRANS,
	SCTP_IDX_SCTPOUTOFBLUE,			SCTP_IDX_SCTPOUTORDERCHUNKS,	SCTP_IDX_SCTPOUTSCTPPKTS,
	SCTP_IDX_SCTPOUTUNORDERCHUNKS,	SCTP_IDX_SCTPOUTWINPROBE,		SCTP_IDX_SCTPOUTWINUPDATE,
	SCTP_IDX_SCTPPASSIVEESTAB,		SCTP_IDX_SCTPREASMUSRMSGS,		SCTP_IDX_SCTPRETRANSCHUNKS,
	SCTP_IDX_SCTPRTOALGORITHM,		SCTP_IDX_SCTPRTOINITIAL,		SCTP_IDX_SCTPRTOMAX,
	SCTP_IDX_SCTPRTOMIN,			SCTP_IDX_SCTPSHUTDOWNS,			SCTP_IDX_SCTPTIMHEARBEATDROP,
	SCTP_IDX_SCTPTIMHEARBEATPROBE,	SCTP_IDX_SCTPTIMRETRANS,		SCTP_IDX_SCTPTIMRETRANSDROP,
	SCTP_IDX_SCTPVALCOOKIELIFE,		SCTP_IDX_MAX
} sctp_idx_t;

/* kstat names */
static const char *knames_sctp[] = {
	"sctpAborted",			"sctpActiveEstab",		"sctpChecksumError",
	"sctpCurrEstab",		"sctpFragUsrMsgs",		"sctpInAck",
	"sctpInAckUnsent",		"sctpInClosed",			"sctpInCtrlChunks",
	"sctpInDupAck",			"sctpInInvalidCookie",	"sctpInOrderChunks",
	"sctpInSCTPPkts",		"sctpInUnorderChunks",	"sctpListenDrop",
	"sctpMaxAssocs",		"sctpMaxInitRetr",		"sctpOutAck",
	"sctpOutAckDelayed",	"sctpOutCtrlChunks",	"sctpOutFastRetrans",
	"sctpOutOfBlue",		"sctpOutOrderChunks",	"sctpOutSCTPPkts",
	"sctpOutUnorderChunks",	"sctpOutWinProbe",		"sctpOutWinUpdate",
	"sctpPassiveEstab",		"sctpReasmUsrMsgs",		"sctpRetransChunks",
	"sctpRtoAlgorithm",		"sctpRtoInitial",		"sctpRtoMax",
	"sctpRtoMin",			"sctpShutdowns",		"sctpTimHearBeatDrop",
	"sctpTimHearBeatProbe",	"sctpTimRetrans",		"sctpTimRetransDrop",
	"sctpValCookieLife",	NULL
};

/* solmex metric names */
static const char *snames_sctp[] = {
	_S(SOLMEX_SCTP_SCTPABORTED_N),			_S(SOLMEX_SCTP_SCTPACTIVEESTAB_N),		_S(SOLMEX_SCTP_SCTPCHECKSUMERROR_N),
	_S(SOLMEX_SCTP_SCTPCURRESTAB_N),		_S(SOLMEX_SCTP_SCTPFRAGUSRMSGS_N),		_S(SOLMEX_SCTP_SCTPINACK_N),
	_S(SOLMEX_SCTP_SCTPINACKUNSENT_N),		_S(SOLMEX_SCTP_SCTPINCLOSED_N),			_S(SOLMEX_SCTP_SCTPINCTRLCHUNKS_N),
	_S(SOLMEX_SCTP_SCTPINDUPACK_N),			_S(SOLMEX_SCTP_SCTPININVALIDCOOKIE_N),	_S(SOLMEX_SCTP_SCTPINORDERCHUNKS_N),
	_S(SOLMEX_SCTP_SCTPINSCTPPKTS_N),		_S(SOLMEX_SCTP_SCTPINUNORDERCHUNKS_N),	_S(SOLMEX_SCTP_SCTPLISTENDROP_N),
	_S(SOLMEX_SCTP_SCTPMAXASSOCS_N),		_S(SOLMEX_SCTP_SCTPMAXINITRETR_N),		_S(SOLMEX_SCTP_SCTPOUTACK_N),
	_S(SOLMEX_SCTP_SCTPOUTACKDELAYED_N),	_S(SOLMEX_SCTP_SCTPOUTCTRLCHUNKS_N),	_S(SOLMEX_SCTP_SCTPOUTFASTRETRANS_N),
	_S(SOLMEX_SCTP_SCTPOUTOFBLUE_N),		_S(SOLMEX_SCTP_SCTPOUTORDERCHUNKS_N),	_S(SOLMEX_SCTP_SCTPOUTSCTPPKTS_N),
	_S(SOLMEX_SCTP_SCTPOUTUNORDERCHUNKS_N),	_S(SOLMEX_SCTP_SCTPOUTWINPROBE_N),		_S(SOLMEX_SCTP_SCTPOUTWINUPDATE_N),
	_S(SOLMEX_SCTP_SCTPPASSIVEESTAB_N),		_S(SOLMEX_SCTP_SCTPREASMUSRMSGS_N),		_S(SOLMEX_SCTP_SCTPRETRANSCHUNKS_N),
	_S(SOLMEX_SCTP_SCTPRTOALGORITHM_N),		_S(SOLMEX_SCTP_SCTPRTOINITIAL_N),		_S(SOLMEX_SCTP_SCTPRTOMAX_N),
	_S(SOLMEX_SCTP_SCTPRTOMIN_N),			_S(SOLMEX_SCTP_SCTPSHUTDOWNS_N),		_S(SOLMEX_SCTP_SCTPTIMHEARBEATDROP_N),
	_S(SOLMEX_SCTP_SCTPTIMHEARBEATPROBE_N),	_S(SOLMEX_SCTP_SCTPTIMRETRANS_N),		_S(SOLMEX_SCTP_SCTPTIMRETRANSDROP_N),
	_S(SOLMEX_SCTP_SCTPVALCOOKIELIFE_N),	NULL
};

/* metric HELP text */
static const char *sdesc_sctp[] = {
	SOLMEX_SCTP_SCTPABORTED_D,			SOLMEX_SCTP_SCTPACTIVEESTAB_D,		SOLMEX_SCTP_SCTPCHECKSUMERROR_D,
	SOLMEX_SCTP_SCTPCURRESTAB_D,		SOLMEX_SCTP_SCTPFRAGUSRMSGS_D,		SOLMEX_SCTP_SCTPINACK_D,
	SOLMEX_SCTP_SCTPINACKUNSENT_D,		SOLMEX_SCTP_SCTPINCLOSED_D,			SOLMEX_SCTP_SCTPINCTRLCHUNKS_D,
	SOLMEX_SCTP_SCTPINDUPACK_D,			SOLMEX_SCTP_SCTPININVALIDCOOKIE_D,	SOLMEX_SCTP_SCTPINORDERCHUNKS_D,
	SOLMEX_SCTP_SCTPINSCTPPKTS_D,		SOLMEX_SCTP_SCTPINUNORDERCHUNKS_D,	SOLMEX_SCTP_SCTPLISTENDROP_D,
	SOLMEX_SCTP_SCTPMAXASSOCS_D,		SOLMEX_SCTP_SCTPMAXINITRETR_D,		SOLMEX_SCTP_SCTPOUTACK_D,
	SOLMEX_SCTP_SCTPOUTACKDELAYED_D,	SOLMEX_SCTP_SCTPOUTCTRLCHUNKS_D,	SOLMEX_SCTP_SCTPOUTFASTRETRANS_D,
	SOLMEX_SCTP_SCTPOUTOFBLUE_D,		SOLMEX_SCTP_SCTPOUTORDERCHUNKS_D,	SOLMEX_SCTP_SCTPOUTSCTPPKTS_D,
	SOLMEX_SCTP_SCTPOUTUNORDERCHUNKS_D,	SOLMEX_SCTP_SCTPOUTWINPROBE_D,		SOLMEX_SCTP_SCTPOUTWINUPDATE_D,
	SOLMEX_SCTP_SCTPPASSIVEESTAB_D,		SOLMEX_SCTP_SCTPREASMUSRMSGS_D,		SOLMEX_SCTP_SCTPRETRANSCHUNKS_D,
	SOLMEX_SCTP_SCTPRTOALGORITHM_D,		SOLMEX_SCTP_SCTPRTOINITIAL_D,		SOLMEX_SCTP_SCTPRTOMAX_D,
	SOLMEX_SCTP_SCTPRTOMIN_D,			SOLMEX_SCTP_SCTPSHUTDOWNS_D,		SOLMEX_SCTP_SCTPTIMHEARBEATDROP_D,
	SOLMEX_SCTP_SCTPTIMHEARBEATPROBE_D,	SOLMEX_SCTP_SCTPTIMRETRANS_D,		SOLMEX_SCTP_SCTPTIMRETRANSDROP_D,
	SOLMEX_SCTP_SCTPVALCOOKIELIFE_D,	NULL
};

static sctp_idx_t sctpstats_a[] = {
	SCTP_IDX_SCTPABORTED,			SCTP_IDX_SCTPACTIVEESTAB,		SCTP_IDX_SCTPCHECKSUMERROR,
	SCTP_IDX_SCTPCURRESTAB,			SCTP_IDX_SCTPFRAGUSRMSGS,		SCTP_IDX_SCTPINACK,
	SCTP_IDX_SCTPINACKUNSENT,		SCTP_IDX_SCTPINCLOSED,			SCTP_IDX_SCTPINCTRLCHUNKS,
	SCTP_IDX_SCTPINDUPACK,			SCTP_IDX_SCTPININVALIDCOOKIE,	SCTP_IDX_SCTPINORDERCHUNKS,
	SCTP_IDX_SCTPINSCTPPKTS,		SCTP_IDX_SCTPINUNORDERCHUNKS,	SCTP_IDX_SCTPLISTENDROP,
	SCTP_IDX_SCTPMAXASSOCS,			SCTP_IDX_SCTPMAXINITRETR,		SCTP_IDX_SCTPOUTACK,
	SCTP_IDX_SCTPOUTACKDELAYED,		SCTP_IDX_SCTPOUTCTRLCHUNKS,		SCTP_IDX_SCTPOUTFASTRETRANS,
	SCTP_IDX_SCTPOUTOFBLUE,			SCTP_IDX_SCTPOUTORDERCHUNKS,	SCTP_IDX_SCTPOUTSCTPPKTS,
	SCTP_IDX_SCTPOUTUNORDERCHUNKS,	SCTP_IDX_SCTPOUTWINPROBE,		SCTP_IDX_SCTPOUTWINUPDATE,
	SCTP_IDX_SCTPPASSIVEESTAB,		SCTP_IDX_SCTPREASMUSRMSGS,		SCTP_IDX_SCTPRETRANSCHUNKS,
	SCTP_IDX_SCTPRTOALGORITHM,		SCTP_IDX_SCTPRTOINITIAL,		SCTP_IDX_SCTPRTOMAX,
	SCTP_IDX_SCTPRTOMIN,			SCTP_IDX_SCTPSHUTDOWNS,			SCTP_IDX_SCTPTIMHEARBEATDROP,
	SCTP_IDX_SCTPTIMHEARBEATPROBE,	SCTP_IDX_SCTPTIMRETRANS,		SCTP_IDX_SCTPTIMRETRANSDROP,
	SCTP_IDX_SCTPVALCOOKIELIFE, // 40
};
static const uint32_t sctpstats_a_sz = ARRAY_SIZE(sctpstats_a);

static sctp_idx_t sctpstats_x[] = {
	SCTP_IDX_SCTPABORTED,			SCTP_IDX_SCTPACTIVEESTAB,		SCTP_IDX_SCTPCHECKSUMERROR,
	SCTP_IDX_SCTPCURRESTAB,			SCTP_IDX_SCTPFRAGUSRMSGS,		SCTP_IDX_SCTPINACK,
	SCTP_IDX_SCTPINACKUNSENT,		SCTP_IDX_SCTPINCLOSED,			SCTP_IDX_SCTPINCTRLCHUNKS,
	SCTP_IDX_SCTPINDUPACK,			SCTP_IDX_SCTPININVALIDCOOKIE,	SCTP_IDX_SCTPINORDERCHUNKS,
	SCTP_IDX_SCTPINSCTPPKTS,		SCTP_IDX_SCTPINUNORDERCHUNKS,	SCTP_IDX_SCTPLISTENDROP,
																	SCTP_IDX_SCTPOUTACK,
	SCTP_IDX_SCTPOUTACKDELAYED,		SCTP_IDX_SCTPOUTCTRLCHUNKS,		SCTP_IDX_SCTPOUTFASTRETRANS,
	SCTP_IDX_SCTPOUTOFBLUE,			SCTP_IDX_SCTPOUTORDERCHUNKS,	SCTP_IDX_SCTPOUTSCTPPKTS,
	SCTP_IDX_SCTPOUTUNORDERCHUNKS,
	SCTP_IDX_SCTPPASSIVEESTAB,		SCTP_IDX_SCTPREASMUSRMSGS,		SCTP_IDX_SCTPRETRANSCHUNKS,
	//
									SCTP_IDX_SCTPSHUTDOWNS,			SCTP_IDX_SCTPTIMHEARBEATDROP,
	SCTP_IDX_SCTPTIMHEARBEATPROBE,	SCTP_IDX_SCTPTIMRETRANS,		SCTP_IDX_SCTPTIMRETRANSDROP,
	// 40 - 9 = 31
};
static const uint32_t sctpstats_x_sz = ARRAY_SIZE(sctpstats_x);

static sctp_idx_t sctpstats_r[] = {
	SCTP_IDX_SCTPABORTED,			SCTP_IDX_SCTPACTIVEESTAB,		SCTP_IDX_SCTPCHECKSUMERROR,
	SCTP_IDX_SCTPCURRESTAB,											SCTP_IDX_SCTPINACK,
	SCTP_IDX_SCTPINACKUNSENT,		SCTP_IDX_SCTPINCLOSED,
	SCTP_IDX_SCTPINDUPACK,			SCTP_IDX_SCTPININVALIDCOOKIE,
	SCTP_IDX_SCTPINSCTPPKTS,										SCTP_IDX_SCTPLISTENDROP,
																	SCTP_IDX_SCTPOUTACK,
	//
	SCTP_IDX_SCTPOUTOFBLUE,											SCTP_IDX_SCTPOUTSCTPPKTS,
	//
	SCTP_IDX_SCTPPASSIVEESTAB,
	//
									SCTP_IDX_SCTPSHUTDOWNS,
									SCTP_IDX_SCTPTIMRETRANS
	// 40 - 9 - 14 = 17
};
static const uint32_t sctpstats_r_sz = ARRAY_SIZE(sctpstats_r);


/* index into snames/knames/sdesc */
typedef enum tcp_idx {
	TCP_IDX_ACTIVEOPENS,		TCP_IDX_ATTEMPTFAILS,		TCP_IDX_CONNTABLESIZE,
	TCP_IDX_CONNTABLESIZE6,		TCP_IDX_CURRESTAB,			TCP_IDX_ESTABRESETS,
	TCP_IDX_HALFOPENDROP,		TCP_IDX_INACKBYTES,			TCP_IDX_INACKSEGS,
	TCP_IDX_INACKUNSENT,		TCP_IDX_INCLOSED,			TCP_IDX_INDATADUPBYTES,
	TCP_IDX_INDATADUPSEGS,		TCP_IDX_INDATAINORDERBYTES,	TCP_IDX_INDATAINORDERSEGS,
	TCP_IDX_INDATAPARTDUPBYTES,	TCP_IDX_INDATAPARTDUPSEGS,	TCP_IDX_INDATAPASTWINBYTES,
	TCP_IDX_INDATAPASTWINSEGS,	TCP_IDX_INDATAUNORDERBYTES,	TCP_IDX_INDATAUNORDERSEGS,
	TCP_IDX_INDUPACK,			TCP_IDX_INSEGS,				TCP_IDX_INWINPROBE,
	TCP_IDX_INWINUPDATE,		TCP_IDX_LISTENDROP,			TCP_IDX_LISTENDROPQ0,
	TCP_IDX_MAXCONN,			TCP_IDX_OUTACK,				TCP_IDX_OUTACKDELAYED,
	TCP_IDX_OUTCONTROL,			TCP_IDX_OUTDATABYTES,		TCP_IDX_OUTDATASEGS,
	TCP_IDX_OUTFASTRETRANS,		TCP_IDX_OUTRSTS,			TCP_IDX_OUTSACKRETRANSSEGS,
	TCP_IDX_OUTSEGS,			TCP_IDX_OUTURG,				TCP_IDX_OUTWINPROBE,
	TCP_IDX_OUTWINUPDATE,		TCP_IDX_PASSIVEOPENS,		TCP_IDX_RETRANSBYTES,
	TCP_IDX_RETRANSSEGS,		TCP_IDX_RTOALGORITHM,		TCP_IDX_RTOMAX,
	TCP_IDX_RTOMIN,				TCP_IDX_RTTNOUPDATE,		TCP_IDX_RTTUPDATE,
	TCP_IDX_TIMKEEPALIVE,		TCP_IDX_TIMKEEPALIVEDROP,	TCP_IDX_TIMKEEPALIVEPROBE,
	TCP_IDX_TIMRETRANS,			TCP_IDX_TIMRETRANSDROP,		TCP_IDX_MAX
} tcp_idx_t;

/* kstat names */
static const char *knames_tcp[] = {
	"activeOpens",			"attemptFails",			"connTableSize",
	"connTableSize6",		"currEstab",			"estabResets",
	"halfOpenDrop",			"inAckBytes",			"inAckSegs",
	"inAckUnsent",			"inClosed",				"inDataDupBytes",
	"inDataDupSegs",		"inDataInorderBytes",	"inDataInorderSegs",
	"inDataPartDupBytes",	"inDataPartDupSegs",	"inDataPastWinBytes",
	"inDataPastWinSegs",	"inDataUnorderBytes",	"inDataUnorderSegs",
	"inDupAck",				"inSegs",				"inWinProbe",
	"inWinUpdate",			"listenDrop",			"listenDropQ0",
	"maxConn",				"outAck",				"outAckDelayed",
	"outControl",			"outDataBytes",			"outDataSegs",
	"outFastRetrans",		"outRsts",				"outSackRetransSegs",
	"outSegs",				"outUrg",				"outWinProbe",
	"outWinUpdate",			"passiveOpens",			"retransBytes",
	"retransSegs",			"rtoAlgorithm",			"rtoMax",
	"rtoMin",				"rttNoUpdate",			"rttUpdate",
	"timKeepalive",			"timKeepaliveDrop",		"timKeepaliveProbe",
	"timRetrans",			"timRetransDrop",		NULL
};

/* solmex metric names */
static const char *snames_tcp[] = {
	_S(SOLMEX_TCP_ACTIVEOPENS_N),		_S(SOLMEX_TCP_ATTEMPTFAILS_N),		_S(SOLMEX_TCP_CONNTABLESIZE_N),
	_S(SOLMEX_TCP_CONNTABLESIZE6_N),	_S(SOLMEX_TCP_CURRESTAB_N),			_S(SOLMEX_TCP_ESTABRESETS_N),
	_S(SOLMEX_TCP_HALFOPENDROP_N),		_S(SOLMEX_TCP_INACKBYTES_N),		_S(SOLMEX_TCP_INACKSEGS_N),
	_S(SOLMEX_TCP_INACKUNSENT_N),		_S(SOLMEX_TCP_INCLOSED_N),			_S(SOLMEX_TCP_INDATADUPBYTES_N),
	_S(SOLMEX_TCP_INDATADUPSEGS_N),		_S(SOLMEX_TCP_INDATAINORDERBYTES_N),_S(SOLMEX_TCP_INDATAINORDERSEGS_N),
	_S(SOLMEX_TCP_INDATAPARTDUPBYTES_N),_S(SOLMEX_TCP_INDATAPARTDUPSEGS_N),	_S(SOLMEX_TCP_INDATAPASTWINBYTES_N),
	_S(SOLMEX_TCP_INDATAPASTWINSEGS_N),	_S(SOLMEX_TCP_INDATAUNORDERBYTES_N),_S(SOLMEX_TCP_INDATAUNORDERSEGS_N),
	_S(SOLMEX_TCP_INDUPACK_N),			_S(SOLMEX_TCP_INSEGS_N),			_S(SOLMEX_TCP_INWINPROBE_N),
	_S(SOLMEX_TCP_INWINUPDATE_N),		_S(SOLMEX_TCP_LISTENDROP_N),		_S(SOLMEX_TCP_LISTENDROPQ0_N),
	_S(SOLMEX_TCP_MAXCONN_N),			_S(SOLMEX_TCP_OUTACK_N),			_S(SOLMEX_TCP_OUTACKDELAYED_N),
	_S(SOLMEX_TCP_OUTCONTROL_N),		_S(SOLMEX_TCP_OUTDATABYTES_N),		_S(SOLMEX_TCP_OUTDATASEGS_N),
	_S(SOLMEX_TCP_OUTFASTRETRANS_N),	_S(SOLMEX_TCP_OUTRSTS_N),			_S(SOLMEX_TCP_OUTSACKRETRANSSEGS_N),
	_S(SOLMEX_TCP_OUTSEGS_N),			_S(SOLMEX_TCP_OUTURG_N),			_S(SOLMEX_TCP_OUTWINPROBE_N),
	_S(SOLMEX_TCP_OUTWINUPDATE_N),		_S(SOLMEX_TCP_PASSIVEOPENS_N),		_S(SOLMEX_TCP_RETRANSBYTES_N),
	_S(SOLMEX_TCP_RETRANSSEGS_N),		_S(SOLMEX_TCP_RTOALGORITHM_N),		_S(SOLMEX_TCP_RTOMAX_N),
	_S(SOLMEX_TCP_RTOMIN_N),			_S(SOLMEX_TCP_RTTNOUPDATE_N),		_S(SOLMEX_TCP_RTTUPDATE_N),
	_S(SOLMEX_TCP_TIMKEEPALIVE_N),		_S(SOLMEX_TCP_TIMKEEPALIVEDROP_N),	_S(SOLMEX_TCP_TIMKEEPALIVEPROBE_N),
	_S(SOLMEX_TCP_TIMRETRANS_N),		_S(SOLMEX_TCP_TIMRETRANSDROP_N),	NULL
};

/* metric HELP text */
static const char *sdesc_tcp[] = {
	SOLMEX_TCP_ACTIVEOPENS_D,		SOLMEX_TCP_ATTEMPTFAILS_D,		SOLMEX_TCP_CONNTABLESIZE_D,
	SOLMEX_TCP_CONNTABLESIZE6_D,	SOLMEX_TCP_CURRESTAB_D,			SOLMEX_TCP_ESTABRESETS_D,
	SOLMEX_TCP_HALFOPENDROP_D,		SOLMEX_TCP_INACKBYTES_D,		SOLMEX_TCP_INACKSEGS_D,
	SOLMEX_TCP_INACKUNSENT_D,		SOLMEX_TCP_INCLOSED_D,			SOLMEX_TCP_INDATADUPBYTES_D,
	SOLMEX_TCP_INDATADUPSEGS_D,		SOLMEX_TCP_INDATAINORDERBYTES_D,SOLMEX_TCP_INDATAINORDERSEGS_D,
	SOLMEX_TCP_INDATAPARTDUPBYTES_D,SOLMEX_TCP_INDATAPARTDUPSEGS_D,	SOLMEX_TCP_INDATAPASTWINBYTES_D,
	SOLMEX_TCP_INDATAPASTWINSEGS_D,	SOLMEX_TCP_INDATAUNORDERBYTES_D,SOLMEX_TCP_INDATAUNORDERSEGS_D,
	SOLMEX_TCP_INDUPACK_D,			SOLMEX_TCP_INSEGS_D,			SOLMEX_TCP_INWINPROBE_D,
	SOLMEX_TCP_INWINUPDATE_D,		SOLMEX_TCP_LISTENDROP_D,		SOLMEX_TCP_LISTENDROPQ0_D,
	SOLMEX_TCP_MAXCONN_D,			SOLMEX_TCP_OUTACK_D,			SOLMEX_TCP_OUTACKDELAYED_D,
	SOLMEX_TCP_OUTCONTROL_D,		SOLMEX_TCP_OUTDATABYTES_D,		SOLMEX_TCP_OUTDATASEGS_D,
	SOLMEX_TCP_OUTFASTRETRANS_D,	SOLMEX_TCP_OUTRSTS_D,			SOLMEX_TCP_OUTSACKRETRANSSEGS_D,
	SOLMEX_TCP_OUTSEGS_D,			SOLMEX_TCP_OUTURG_D,			SOLMEX_TCP_OUTWINPROBE_D,
	SOLMEX_TCP_OUTWINUPDATE_D,		SOLMEX_TCP_PASSIVEOPENS_D,		SOLMEX_TCP_RETRANSBYTES_D,
	SOLMEX_TCP_RETRANSSEGS_D,		SOLMEX_TCP_RTOALGORITHM_D,		SOLMEX_TCP_RTOMAX_D,
	SOLMEX_TCP_RTOMIN_D,			SOLMEX_TCP_RTTNOUPDATE_D,		SOLMEX_TCP_RTTUPDATE_D,
	SOLMEX_TCP_TIMKEEPALIVE_D,		SOLMEX_TCP_TIMKEEPALIVEDROP_D,	SOLMEX_TCP_TIMKEEPALIVEPROBE_D,
	SOLMEX_TCP_TIMRETRANS_D,		SOLMEX_TCP_TIMRETRANSDROP_D,	NULL
};

static tcp_idx_t tcpstats_a[] = {
	TCP_IDX_ACTIVEOPENS,		TCP_IDX_ATTEMPTFAILS,		TCP_IDX_CONNTABLESIZE,
	TCP_IDX_CONNTABLESIZE6,		TCP_IDX_CURRESTAB,			TCP_IDX_ESTABRESETS,
	TCP_IDX_HALFOPENDROP,		TCP_IDX_INACKBYTES,			TCP_IDX_INACKSEGS,
	TCP_IDX_INACKUNSENT,		TCP_IDX_INCLOSED,			TCP_IDX_INDATADUPBYTES,
	TCP_IDX_INDATADUPSEGS,		TCP_IDX_INDATAINORDERBYTES,	TCP_IDX_INDATAINORDERSEGS,
	TCP_IDX_INDATAPARTDUPBYTES,	TCP_IDX_INDATAPARTDUPSEGS,	TCP_IDX_INDATAPASTWINBYTES,
	TCP_IDX_INDATAPASTWINSEGS,	TCP_IDX_INDATAUNORDERBYTES,	TCP_IDX_INDATAUNORDERSEGS,
	TCP_IDX_INDUPACK,			TCP_IDX_INSEGS,				TCP_IDX_INWINPROBE,
	TCP_IDX_INWINUPDATE,		TCP_IDX_LISTENDROP,			TCP_IDX_LISTENDROPQ0,
	TCP_IDX_MAXCONN,			TCP_IDX_OUTACK,				TCP_IDX_OUTACKDELAYED,
	TCP_IDX_OUTCONTROL,			TCP_IDX_OUTDATABYTES,		TCP_IDX_OUTDATASEGS,
	TCP_IDX_OUTFASTRETRANS,		TCP_IDX_OUTRSTS,			TCP_IDX_OUTSACKRETRANSSEGS,
	TCP_IDX_OUTSEGS,			TCP_IDX_OUTURG,				TCP_IDX_OUTWINPROBE,
	TCP_IDX_OUTWINUPDATE,		TCP_IDX_PASSIVEOPENS,		TCP_IDX_RETRANSBYTES,
	TCP_IDX_RETRANSSEGS,		TCP_IDX_RTOALGORITHM,		TCP_IDX_RTOMAX,
	TCP_IDX_RTOMIN,				TCP_IDX_RTTNOUPDATE,		TCP_IDX_RTTUPDATE,
	TCP_IDX_TIMKEEPALIVE,		TCP_IDX_TIMKEEPALIVEDROP,	TCP_IDX_TIMKEEPALIVEPROBE,
	TCP_IDX_TIMRETRANS,			TCP_IDX_TIMRETRANSDROP	// 53
};
static const uint32_t tcpstats_a_sz = ARRAY_SIZE(tcpstats_a);

static tcp_idx_t tcpstats_x[] = {
	TCP_IDX_ACTIVEOPENS,		TCP_IDX_ATTEMPTFAILS,
								TCP_IDX_CURRESTAB,			TCP_IDX_ESTABRESETS,
	TCP_IDX_HALFOPENDROP,		TCP_IDX_INACKBYTES,			TCP_IDX_INACKSEGS,
	TCP_IDX_INACKUNSENT,		TCP_IDX_INCLOSED,			TCP_IDX_INDATADUPBYTES,
	TCP_IDX_INDATADUPSEGS,		TCP_IDX_INDATAINORDERBYTES,	TCP_IDX_INDATAINORDERSEGS,
	TCP_IDX_INDATAPARTDUPBYTES,	TCP_IDX_INDATAPARTDUPSEGS,	TCP_IDX_INDATAPASTWINBYTES,
	TCP_IDX_INDATAPASTWINSEGS,	TCP_IDX_INDATAUNORDERBYTES,	TCP_IDX_INDATAUNORDERSEGS,
	TCP_IDX_INDUPACK,			TCP_IDX_INSEGS,				TCP_IDX_INWINPROBE,
	TCP_IDX_INWINUPDATE,		TCP_IDX_LISTENDROP,			TCP_IDX_LISTENDROPQ0,
								TCP_IDX_OUTACK,				TCP_IDX_OUTACKDELAYED,
	TCP_IDX_OUTCONTROL,			TCP_IDX_OUTDATABYTES,		TCP_IDX_OUTDATASEGS,
	TCP_IDX_OUTFASTRETRANS,		TCP_IDX_OUTRSTS,			TCP_IDX_OUTSACKRETRANSSEGS,
	TCP_IDX_OUTSEGS,			TCP_IDX_OUTURG,
								TCP_IDX_PASSIVEOPENS,		TCP_IDX_RETRANSBYTES,
	TCP_IDX_RETRANSSEGS,
								TCP_IDX_RTTNOUPDATE,		TCP_IDX_RTTUPDATE,
	TCP_IDX_TIMKEEPALIVE,		TCP_IDX_TIMKEEPALIVEDROP,	TCP_IDX_TIMKEEPALIVEPROBE,
	TCP_IDX_TIMRETRANS,			TCP_IDX_TIMRETRANSDROP	// 53 - 8 = 45
};
static const uint32_t tcpstats_x_sz = ARRAY_SIZE(tcpstats_x);

static tcp_idx_t tcpstats_r[] = {
	TCP_IDX_ACTIVEOPENS,		TCP_IDX_ATTEMPTFAILS,
								TCP_IDX_CURRESTAB,			TCP_IDX_ESTABRESETS,
	TCP_IDX_HALFOPENDROP,									TCP_IDX_INACKSEGS,
	TCP_IDX_INACKUNSENT,		TCP_IDX_INCLOSED,
	//
	//
	TCP_IDX_INDATAPASTWINSEGS,
	TCP_IDX_INDUPACK,			TCP_IDX_INSEGS,
								TCP_IDX_LISTENDROP,			TCP_IDX_LISTENDROPQ0,
	//
	//
								TCP_IDX_OUTRSTS,
	TCP_IDX_OUTSEGS,			TCP_IDX_OUTURG,
								TCP_IDX_PASSIVEOPENS,
	TCP_IDX_RETRANSSEGS,
	//
	//
	TCP_IDX_TIMRETRANS,			TCP_IDX_TIMRETRANSDROP	// 53 - 8 - 25 = 20
};
static const uint32_t tcpstats_r_sz = ARRAY_SIZE(tcpstats_r);


/* index into snames/knames/sdesc */
typedef enum udp_idx {
	UDP_IDX_ENTRY6SIZE,	UDP_IDX_ENTRYSIZE,		UDP_IDX_INDATAGRAMS,
	UDP_IDX_INERRORS,	UDP_IDX_OUTDATAGRAMS,	UDP_IDX_OUTERRORS,
	UDP_IDX_MAX
} udp_idx_t;

/* kstat names */
static const char *knames_udp[] = {
	"entry6Size",	"entrySize",	"inDatagrams",
	"inErrors",		"outDatagrams",	"outErrors",
	NULL
};

/* solmex metric names */
static const char *snames_udp[] = {
	_S(SOLMEX_UDP_ENTRY6SIZE_N),_S(SOLMEX_UDP_ENTRYSIZE_N),		_S(SOLMEX_UDP_INDATAGRAMS_N),
	_S(SOLMEX_UDP_INERRORS_N),	_S(SOLMEX_UDP_OUTDATAGRAMS_N),	_S(SOLMEX_UDP_OUTERRORS_N),
	NULL
};

/* metric HELP text */
static const char *sdesc_udp[] = {
	SOLMEX_UDP_ENTRY6SIZE_D,SOLMEX_UDP_ENTRYSIZE_D,		SOLMEX_UDP_INDATAGRAMS_D,
	SOLMEX_UDP_INERRORS_D,	SOLMEX_UDP_OUTDATAGRAMS_D,	SOLMEX_UDP_OUTERRORS_D,
	NULL
};

static udp_idx_t udpstats_a[] = {
	UDP_IDX_ENTRY6SIZE,	UDP_IDX_ENTRYSIZE,		UDP_IDX_INDATAGRAMS,
	UDP_IDX_INERRORS,	UDP_IDX_OUTDATAGRAMS,	UDP_IDX_OUTERRORS,
};
static const uint32_t udpstats_a_sz = ARRAY_SIZE(udpstats_a);

static udp_idx_t udpstats_x[] = {
												UDP_IDX_INDATAGRAMS,
	UDP_IDX_INERRORS,	UDP_IDX_OUTDATAGRAMS,	UDP_IDX_OUTERRORS,
};
static const uint32_t udpstats_x_sz = ARRAY_SIZE(udpstats_x);

static udp_idx_t udpstats_r[] = {
												UDP_IDX_INDATAGRAMS,
	UDP_IDX_INERRORS,	UDP_IDX_OUTDATAGRAMS,	UDP_IDX_OUTERRORS,
};
static const uint32_t udpstats_r_sz = ARRAY_SIZE(udpstats_r);

#ifdef __cplusplus
}
#endif

#endif  // SOLMEX_MIB_IMPL_H
