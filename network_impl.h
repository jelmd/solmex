/*
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License") 1.1!
 * You may not use this file except in compliance with the License.
 *
 * See  https://spdx.org/licenses/CDDL-1.1.html  for the specific
 * language governing permissions and limitations under the License.
 *
 * Copyright 2025 Jens Elkner (jel+solmex-src@cs.ovgu.de)
 */

/*
NOTE: net_idx_t, sname, sdesc and kname need to be always in sync -
*/

#ifndef SOLMEX_NETWORK_IMPL_H
#define SOLMEX_NETWORK_IMPL_H

#include "common.h"

#ifdef __cplusplus
extern "C" {
#endif

/* index into snames/knames/sdesc */
typedef enum net_idx {
	NET_IDX_IFSPEED_BPS,			NET_IDX_LINK_STATE,				NET_IDX_LRO_BADIPCSUMS_PKTS,
	NET_IDX_LRO_BADTCPCSUMS_PKTS,	NET_IDX_LRO_OUTSEQ_PKTS,		NET_IDX_LRO_TRUNC_PKTS,
	NET_IDX_PHYS_STATE,				NET_IDX_RX_BROADCAST_BYTES,		NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_RX_BYTES,				NET_IDX_RX_BYTES64,				NET_IDX_RX_DROP_BYTES,
	NET_IDX_RX_DROP_PKTS,			NET_IDX_RX_ERROR_PKTS,			NET_IDX_RX_INTRS,
	NET_IDX_RX_INTRS_BYTES,			NET_IDX_RX_LOCAL_BYTES,			NET_IDX_RX_LOCAL_PKTS,
	NET_IDX_RX_MULTICAST_BYTES,		NET_IDX_RX_MULTICAST_PKTS,		NET_IDX_RX_NOBUF_PKTS,
	NET_IDX_RX_PKTS,				NET_IDX_RX_PKTS64,				NET_IDX_RX_POLLS,
	NET_IDX_RX_POLLS_BYTES,			NET_IDX_SEC_DHCPDROPPED_PKTS,	NET_IDX_SEC_DHCPSPOOFED_PKTS,
	NET_IDX_SEC_IPSPOOFED_PKTS,		NET_IDX_SEC_MACSPOOFED_PKTS,	NET_IDX_SEC_RESTRICTED_PKTS,
	NET_IDX_TX_BLOCK_PKTS,			NET_IDX_TX_BROADCAST_BYTES,		NET_IDX_TX_BROADCAST_PKTS,
	NET_IDX_TX_BYTES,				NET_IDX_TX_BYTES64,				NET_IDX_TX_COLLS,
	NET_IDX_TX_DROP_BYTES,			NET_IDX_TX_DROP_PKTS,			NET_IDX_TX_ERROR_PKTS,
	NET_IDX_TX_LOCAL_BYTES,			NET_IDX_TX_LOCAL_PKTS,			NET_IDX_TX_MISC_ERROR_PKTS,
	NET_IDX_TX_MULTICAST_BYTES,		NET_IDX_TX_MULTICAST_PKTS,		NET_IDX_TX_NOBUF_PKTS,
	NET_IDX_TX_PKTS,				NET_IDX_TX_PKTS64,				NET_IDX_TX_UNBLOCK_CALLS,
	NET_IDX_MAX
} net_idx_t;

/* kstat names */
static const char *knames[] = {
	"ifspeed",			"link_state",		"lrobadipcsums",
	"lrobadtcpcsums",	"lrooutseqpkts",	"lrotruncpkts",
	"phys_state",		"bcstrcvbytes",		"brdcstrcv",
	"rbytes",			"rbytes64",			"idropbytes",
	"idrops",			"ierrors",			"intrs",
	"intrbytes",		"rxlocalbytes",		"rxlocal",
	"multircvbytes",	"multircv",			"norcvbuf",
	"ipackets",			"ipackets64",		"polls",
	"pollbytes",		"dhcpdropped",		"dhcpspoofed",
	"ipspoofed",		"macspoofed",		"restricted",
	"blockcnt",			"bcstxmtbytes",		"brdcstxmt",
	"obytes",			"obytes64",			"collisions",
	"odropbytes",		"odrops",			"oerrors",
	"txlocalbytes",		"txlocal",			"txerrors",
	"multixmtbytes",	"multixmt",			"noxmtbuf",
	"opackets",			"opackets64",		"unblockcnt",
	NULL
};

/* solmex metric names */
static const char *snames[] = {
#define STRINGIFY(x) #x
#define _S(x) STRINGIFY(x)
	_S(SOLMEX_NET_IFSPEED_BPS_N),			_S(SOLMEX_NET_LINK_STATE_N),			_S(SOLMEX_NET_LRO_BADIPCSUMS_PKTS_N),
	_S(SOLMEX_NET_LRO_BADTCPCSUMS_PKTS_N),	_S(SOLMEX_NET_LRO_OUTSEQ_PKTS_N),		_S(SOLMEX_NET_LRO_TRUNC_PKTS_N),
	_S(SOLMEX_NET_PHYS_STATE_N),			_S(SOLMEX_NET_RX_BROADCAST_BYTES_N),	_S(SOLMEX_NET_RX_BROADCAST_PKTS_N),
	_S(SOLMEX_NET_RX_BYTES_N),				_S(SOLMEX_NET_RX_BYTES64_N),			_S(SOLMEX_NET_RX_DROP_BYTES_N),
	_S(SOLMEX_NET_RX_DROP_PKTS_N),			_S(SOLMEX_NET_RX_ERROR_PKTS_N),			_S(SOLMEX_NET_RX_INTRS_N),
	_S(SOLMEX_NET_RX_INTRS_BYTES_N),		_S(SOLMEX_NET_RX_LOCAL_BYTES_N),		_S(SOLMEX_NET_RX_LOCAL_PKTS_N),
	_S(SOLMEX_NET_RX_MULTICAST_BYTES_N),	_S(SOLMEX_NET_RX_MULTICAST_PKTS_N),		_S(SOLMEX_NET_RX_NOBUF_PKTS_N),
	_S(SOLMEX_NET_RX_PKTS_N),				_S(SOLMEX_NET_RX_PKTS64_N),				_S(SOLMEX_NET_RX_POLLS_N),
	_S(SOLMEX_NET_RX_POLLS_BYTES_N),		_S(SOLMEX_NET_SEC_DHCPDROPPED_PKTS_N),	_S(SOLMEX_NET_SEC_DHCPSPOOFED_PKTS_N),
	_S(SOLMEX_NET_SEC_IPSPOOFED_PKTS_N),	_S(SOLMEX_NET_SEC_MACSPOOFED_PKTS_N),	_S(SOLMEX_NET_SEC_RESTRICTED_PKTS_N),
	_S(SOLMEX_NET_TX_BLOCK_PKTS_N),			_S(SOLMEX_NET_TX_BROADCAST_BYTES_N),	_S(SOLMEX_NET_TX_BROADCAST_PKTS_N),
	_S(SOLMEX_NET_TX_BYTES_N),				_S(SOLMEX_NET_TX_BYTES64_N),			_S(SOLMEX_NET_TX_COLLS_N),
	_S(SOLMEX_NET_TX_DROP_BYTES_N),			_S(SOLMEX_NET_TX_DROP_PKTS_N),			_S(SOLMEX_NET_TX_ERROR_PKTS_N),
	_S(SOLMEX_NET_TX_LOCAL_BYTES_N),		_S(SOLMEX_NET_TX_LOCAL_PKTS_N),			_S(SOLMEX_NET_TX_MISC_ERROR_PKTS_N),
	_S(SOLMEX_NET_TX_MULTICAST_BYTES_N),	_S(SOLMEX_NET_TX_MULTICAST_PKTS_N),		_S(SOLMEX_NET_TX_NOBUF_PKTS_N),
	_S(SOLMEX_NET_TX_PKTS_N),				_S(SOLMEX_NET_TX_PKTS64_N),				_S(SOLMEX_NET_TX_UNBLOCK_CALLS_N),
	NULL
};

/* metric HELP text */
static const char *sdesc[] = {
	SOLMEX_NET_IFSPEED_BPS_D,			SOLMEX_NET_LINK_STATE_D,			SOLMEX_NET_LRO_BADIPCSUMS_PKTS_D,
	SOLMEX_NET_LRO_BADTCPCSUMS_PKTS_D,	SOLMEX_NET_LRO_OUTSEQ_PKTS_D,		SOLMEX_NET_LRO_TRUNC_PKTS_D,
	SOLMEX_NET_PHYS_STATE_D,			SOLMEX_NET_RX_BROADCAST_BYTES_D,	SOLMEX_NET_RX_BROADCAST_PKTS_D,
	SOLMEX_NET_RX_BYTES_D,				SOLMEX_NET_RX_BYTES64_D,			SOLMEX_NET_RX_DROP_BYTES_D,
	SOLMEX_NET_RX_DROP_PKTS_D,			SOLMEX_NET_RX_ERROR_PKTS_D,			SOLMEX_NET_RX_INTRS_D,
	SOLMEX_NET_RX_INTRS_BYTES_D,		SOLMEX_NET_RX_LOCAL_BYTES_D,		SOLMEX_NET_RX_LOCAL_PKTS_D,
	SOLMEX_NET_RX_MULTICAST_BYTES_D,	SOLMEX_NET_RX_MULTICAST_PKTS_D,		SOLMEX_NET_RX_NOBUF_PKTS_D,
	SOLMEX_NET_RX_PKTS_D,				SOLMEX_NET_RX_PKTS64_D,				SOLMEX_NET_RX_POLLS_D,
	SOLMEX_NET_RX_POLLS_BYTES_D,		SOLMEX_NET_SEC_DHCPDROPPED_PKTS_D,	SOLMEX_NET_SEC_DHCPSPOOFED_PKTS_D,
	SOLMEX_NET_SEC_IPSPOOFED_PKTS_D,	SOLMEX_NET_SEC_MACSPOOFED_PKTS_D,	SOLMEX_NET_SEC_RESTRICTED_PKTS_D,
	SOLMEX_NET_TX_BLOCK_PKTS_D,			SOLMEX_NET_TX_BROADCAST_BYTES_D,	SOLMEX_NET_TX_BROADCAST_PKTS_D,
	SOLMEX_NET_TX_BYTES_D,				SOLMEX_NET_TX_BYTES64_D,			SOLMEX_NET_TX_COLLS_D,
	SOLMEX_NET_TX_DROP_BYTES_D,			SOLMEX_NET_TX_DROP_PKTS_D,			SOLMEX_NET_TX_ERROR_PKTS_D,
	SOLMEX_NET_TX_LOCAL_BYTES_D,		SOLMEX_NET_TX_LOCAL_PKTS_D,			SOLMEX_NET_TX_MISC_ERROR_PKTS_D,
	SOLMEX_NET_TX_MULTICAST_BYTES_D,	SOLMEX_NET_TX_MULTICAST_PKTS_D,		SOLMEX_NET_TX_NOBUF_PKTS_D,
	SOLMEX_NET_TX_PKTS_D,				SOLMEX_NET_TX_PKTS64_D,				SOLMEX_NET_TX_UNBLOCK_CALLS_D,
	NULL
};

/** all metrics for "kstat link::${nicname}" 	(fallback for Illumos) */
static net_idx_t alnkstats[] = {
	NET_IDX_IFSPEED_BPS,		NET_IDX_LINK_STATE,			NET_IDX_PHYS_STATE,
	NET_IDX_RX_BROADCAST_PKTS,	NET_IDX_RX_BYTES64,			NET_IDX_RX_DROP_PKTS,
	NET_IDX_RX_ERROR_PKTS,		NET_IDX_RX_MULTICAST_PKTS,	NET_IDX_RX_NOBUF_PKTS,
	NET_IDX_RX_PKTS64,			NET_IDX_TX_BROADCAST_PKTS,	NET_IDX_TX_BYTES64,
	NET_IDX_TX_COLLS,			NET_IDX_TX_DROP_PKTS,		NET_IDX_TX_ERROR_PKTS,
	NET_IDX_TX_MULTICAST_PKTS,	NET_IDX_TX_NOBUF_PKTS,		NET_IDX_TX_PKTS64,
};
static uint32_t alnkstats_sz = ARRAY_SIZE(alnkstats);

/** normal aka regular set of metrics to collect (fallback for Illumos) */
static net_idx_t rlnkstats[] = {
	NET_IDX_RX_BYTES64,			NET_IDX_RX_PKTS64,
	NET_IDX_TX_BYTES64,			NET_IDX_TX_PKTS64,
	NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_TX_BROADCAST_PKTS,
	NET_IDX_RX_MULTICAST_PKTS,
	NET_IDX_TX_MULTICAST_PKTS,
	NET_IDX_RX_DROP_PKTS,
	NET_IDX_TX_DROP_PKTS,
	NET_IDX_RX_ERROR_PKTS,
	NET_IDX_TX_ERROR_PKTS,
	NET_IDX_RX_NOBUF_PKTS,
	NET_IDX_TX_NOBUF_PKTS,
	NET_IDX_TX_COLLS,
};
static uint32_t rlnkstats_sz = ARRAY_SIZE(rlnkstats);

/** extended set of metrics to collect (fallback for Illumos) */
static net_idx_t xlnkstats[] = {
	// copy of rlnkstats as above
	NET_IDX_RX_BYTES64,			NET_IDX_RX_PKTS64,
	NET_IDX_TX_BYTES64,			NET_IDX_TX_PKTS64,
	NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_TX_BROADCAST_PKTS,
	NET_IDX_RX_MULTICAST_PKTS,
	NET_IDX_TX_MULTICAST_PKTS,
	NET_IDX_RX_DROP_PKTS,
	NET_IDX_TX_DROP_PKTS,
	NET_IDX_RX_ERROR_PKTS,
	NET_IDX_TX_ERROR_PKTS,
	NET_IDX_RX_NOBUF_PKTS,
	NET_IDX_TX_NOBUF_PKTS,
	NET_IDX_TX_COLLS,
	// additions
	NET_IDX_LINK_STATE,			NET_IDX_PHYS_STATE,
	// remaining wrt. alnkstats
	// NET_IDX_IFSPEED_BPS,		// gets always included by default
};
static uint32_t xlnkstats_sz = ARRAY_SIZE(xlnkstats);

/** all metrics for "kstat  ${nicname}::link" (Solaris, only) */
static net_idx_t anicstats[] = {
	NET_IDX_LRO_BADIPCSUMS_PKTS,	NET_IDX_LRO_BADTCPCSUMS_PKTS,	NET_IDX_LRO_OUTSEQ_PKTS,
	NET_IDX_LRO_TRUNC_PKTS,			NET_IDX_RX_BROADCAST_BYTES,		NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_RX_BYTES,				NET_IDX_RX_DROP_BYTES,			NET_IDX_RX_DROP_PKTS,
	NET_IDX_RX_INTRS,				NET_IDX_RX_INTRS_BYTES,			NET_IDX_RX_LOCAL_BYTES,
	NET_IDX_RX_LOCAL_PKTS,			NET_IDX_RX_MULTICAST_BYTES,		NET_IDX_RX_MULTICAST_PKTS,
	NET_IDX_RX_PKTS,				NET_IDX_RX_POLLS,				NET_IDX_RX_POLLS_BYTES,
	NET_IDX_SEC_DHCPDROPPED_PKTS,	NET_IDX_SEC_DHCPSPOOFED_PKTS,	NET_IDX_SEC_IPSPOOFED_PKTS,
	NET_IDX_SEC_MACSPOOFED_PKTS,	NET_IDX_SEC_RESTRICTED_PKTS,	NET_IDX_TX_BLOCK_PKTS,
	NET_IDX_TX_BROADCAST_BYTES,		NET_IDX_TX_BROADCAST_PKTS,		NET_IDX_TX_BYTES,
	NET_IDX_TX_DROP_BYTES,			NET_IDX_TX_DROP_PKTS,			NET_IDX_TX_ERROR_PKTS,
	NET_IDX_TX_LOCAL_BYTES,			NET_IDX_TX_LOCAL_PKTS,			NET_IDX_TX_MISC_ERROR_PKTS,
	NET_IDX_TX_MULTICAST_BYTES,		NET_IDX_TX_MULTICAST_PKTS,		NET_IDX_TX_PKTS,
	NET_IDX_TX_UNBLOCK_CALLS,
};
static uint32_t anicstats_sz = ARRAY_SIZE(anicstats);

/** normal aka regular set of metrics to collect */
static net_idx_t rnicstats[] = {
	NET_IDX_RX_BYTES,			NET_IDX_RX_PKTS,
	NET_IDX_TX_BYTES,			NET_IDX_TX_PKTS,
	NET_IDX_RX_BROADCAST_BYTES,	NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_TX_BROADCAST_BYTES,	NET_IDX_TX_BROADCAST_PKTS,
	NET_IDX_RX_MULTICAST_BYTES,	NET_IDX_RX_MULTICAST_PKTS,
	NET_IDX_TX_MULTICAST_BYTES,	NET_IDX_TX_MULTICAST_PKTS,
	NET_IDX_RX_DROP_BYTES,		NET_IDX_RX_DROP_PKTS,
	NET_IDX_TX_DROP_BYTES,		NET_IDX_TX_DROP_PKTS,
	NET_IDX_TX_BLOCK_PKTS,		NET_IDX_TX_UNBLOCK_CALLS,
	NET_IDX_TX_ERROR_PKTS,		NET_IDX_TX_MISC_ERROR_PKTS,
};
static uint32_t rnicstats_sz = ARRAY_SIZE(rnicstats);

/** extended set of metrics to collect */
static net_idx_t xnicstats[] = {
	// copy of rnicstats as above
	NET_IDX_RX_BYTES,			NET_IDX_RX_PKTS,
	NET_IDX_TX_BYTES,			NET_IDX_TX_PKTS,
	NET_IDX_RX_BROADCAST_BYTES,	NET_IDX_RX_BROADCAST_PKTS,
	NET_IDX_TX_BROADCAST_BYTES,	NET_IDX_TX_BROADCAST_PKTS,
	NET_IDX_RX_MULTICAST_BYTES,	NET_IDX_RX_MULTICAST_PKTS,
	NET_IDX_TX_MULTICAST_BYTES,	NET_IDX_TX_MULTICAST_PKTS,
	NET_IDX_RX_DROP_BYTES,		NET_IDX_RX_DROP_PKTS,
	NET_IDX_TX_DROP_BYTES,		NET_IDX_TX_DROP_PKTS,
	NET_IDX_TX_BLOCK_PKTS,		NET_IDX_TX_UNBLOCK_CALLS,
	NET_IDX_TX_ERROR_PKTS,		NET_IDX_TX_MISC_ERROR_PKTS,
	// addition
	NET_IDX_SEC_DHCPDROPPED_PKTS,	NET_IDX_SEC_DHCPSPOOFED_PKTS,	NET_IDX_SEC_IPSPOOFED_PKTS,
	NET_IDX_SEC_MACSPOOFED_PKTS,	NET_IDX_SEC_RESTRICTED_PKTS,
	// NET_IDX_RX_INTRS_BYTES,		NET_IDX_RX_INTRS,
	// NET_IDX_RX_POLLS_BYTES,		NET_IDX_RX_POLLS,
	// remaining wrt. anicstats
	// NET_IDX_LRO_BADIPCSUMS_PKTS,	NET_IDX_LRO_BADTCPCSUMS_PKTS,
	// NET_IDX_LRO_OUTSEQ_PKTS,		NET_IDX_LRO_TRUNC_PKTS,
	// NET_IDX_RX_LOCAL_BYTES,		NET_IDX_RX_LOCAL_PKTS,
	// NET_IDX_TX_LOCAL_BYTES,		NET_IDX_TX_LOCAL_PKTS,
};
static uint32_t xnicstats_sz = ARRAY_SIZE(xnicstats);

#ifdef __cplusplus
}
#endif

#endif  // SOLMEX_NETWORK_IMPL_H
